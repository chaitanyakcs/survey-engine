# Development version with both services in one container
services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: survey_engine
      POSTGRES_PASSWORD: development_password
      POSTGRES_DB: survey_engine_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U survey_engine"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Combined FastAPI Backend + WebSocket Server
  app:
    build: .
    ports:
      - "8000:8000"  # FastAPI
      - "8001:8001"  # WebSocket
    environment:
      DATABASE_URL: postgresql://survey_engine:development_password@postgres:5432/survey_engine_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: survey_engine
      REDIS_URL: redis://redis:6379
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN}
      DEBUG: "true"
      ENABLE_STREAMING_GENERATION: "true"
      # No SERVICE specified = both services start
    depends_on:
      postgres:
        condition: service_healthy
    # No volume mounts - manual deployment only
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:8000/health && curl -f http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data: