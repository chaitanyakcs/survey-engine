
services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: survey_engine
      POSTGRES_PASSWORD: development_password
      POSTGRES_DB: survey_engine_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U survey_engine"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI backend application
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://survey_engine:development_password@postgres:5432/survey_engine_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: survey_engine
      REDIS_URL: redis://redis:6379
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN:-}
      DEBUG: "true"
      SERVICE: "backend"
      PORT: 8000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro  # Mount source for development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WebSocket server
  websocket:
    build: .
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://survey_engine:development_password@postgres:5432/survey_engine_db
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: survey_engine
      REDIS_URL: redis://redis:6379
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN:-}
      DEBUG: "true"
      SERVICE: "websocket"
      PORT: 8001
      SKIP_MIGRATIONS: "true"  # Let backend handle migrations
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./websocket_server.py:/app/websocket_server.py:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
      websocket:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data: